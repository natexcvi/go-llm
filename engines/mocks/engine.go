// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	engines "github.com/natexcvi/go-llm/engines"
)

// MockLLM is a mock of LLM interface.
type MockLLM struct {
	ctrl     *gomock.Controller
	recorder *MockLLMMockRecorder
}

// MockLLMMockRecorder is the mock recorder for MockLLM.
type MockLLMMockRecorder struct {
	mock *MockLLM
}

// NewMockLLM creates a new mock instance.
func NewMockLLM(ctrl *gomock.Controller) *MockLLM {
	mock := &MockLLM{ctrl: ctrl}
	mock.recorder = &MockLLMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLM) EXPECT() *MockLLMMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockLLM) Chat(prompt *engines.ChatPrompt) (*engines.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", prompt)
	ret0, _ := ret[0].(*engines.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockLLMMockRecorder) Chat(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockLLM)(nil).Chat), prompt)
}

// MockLLMWithFunctionCalls is a mock of LLMWithFunctionCalls interface.
type MockLLMWithFunctionCalls struct {
	ctrl     *gomock.Controller
	recorder *MockLLMWithFunctionCallsMockRecorder
}

// MockLLMWithFunctionCallsMockRecorder is the mock recorder for MockLLMWithFunctionCalls.
type MockLLMWithFunctionCallsMockRecorder struct {
	mock *MockLLMWithFunctionCalls
}

// NewMockLLMWithFunctionCalls creates a new mock instance.
func NewMockLLMWithFunctionCalls(ctrl *gomock.Controller) *MockLLMWithFunctionCalls {
	mock := &MockLLMWithFunctionCalls{ctrl: ctrl}
	mock.recorder = &MockLLMWithFunctionCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMWithFunctionCalls) EXPECT() *MockLLMWithFunctionCallsMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockLLMWithFunctionCalls) Chat(prompt *engines.ChatPrompt) (*engines.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", prompt)
	ret0, _ := ret[0].(*engines.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockLLMWithFunctionCallsMockRecorder) Chat(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockLLMWithFunctionCalls)(nil).Chat), prompt)
}

// ChatWithFunctions mocks base method.
func (m *MockLLMWithFunctionCalls) ChatWithFunctions(prompt *engines.ChatPrompt, functions []engines.FunctionSpecs) (*engines.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatWithFunctions", prompt, functions)
	ret0, _ := ret[0].(*engines.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatWithFunctions indicates an expected call of ChatWithFunctions.
func (mr *MockLLMWithFunctionCallsMockRecorder) ChatWithFunctions(prompt, functions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatWithFunctions", reflect.TypeOf((*MockLLMWithFunctionCalls)(nil).ChatWithFunctions), prompt, functions)
}
